<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
           http://www.springframework.org/schema/beans/spring-beans.xsd  
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context.xsd  
           http://www.springframework.org/schema/aop  
           http://www.springframework.org/schema/aop/spring-aop.xsd
           http://www.springframework.org/schema/tx  
           http://www.springframework.org/schema/tx/spring-tx.xsd
           http://www.springframework.org/schema/rabbit 
           http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

           <bean id="umPropertyPlaceHolderConfigurer" class="com.sp.um.common.UMPropertyPlaceHolderConfigurer">
           		<property name="location" value="classpath:rabbitumessager.properties"></property>
                <property name="systemPropertiesMode" value="2" />
       			<property name="searchSystemEnvironment" value="true" />
       			<property name="ignoreResourceNotFound" value="true" />
       			<property name="ignoreUnresolvablePlaceholders" value="true" />
           </bean>
           
           <bean id="umessagerInstance" class="com.sp.rum.RUMessagerImpl">
           		<property name="iAndRMessageListenerRegister" ref="iAndRMessageListenerRegister"></property>
           		<property name="asyncResponseMessageListenerRegister" ref="responseMessageListenerRegister"></property>
           		<property name="eventListenerRegister" ref="eventListenerRegister"></property>
           		<property name="contextAware" ref="contextAware"></property>
           		<property name="template" ref="template"></property>
           </bean>
           <bean id="iAndRMessageListenerRegister" class="com.sp.rum.register.InformAndRequestMessageListenerRegister"></bean>
           <bean id="responseMessageListenerRegister" class="com.sp.rum.register.ResponseMessageListenerRegister"></bean>
           
           <bean id="eventListenerRegister" class="com.sp.rum.register.EventListenerRegister">
           		<property name="contextAware" ref="contextAware"></property>
           </bean>
           <bean id="contextAware" class="com.sp.rum.utils.RUMApplicationContextAware"></bean>
           
           <!-- RabbitMQ Configures  -->
          <rabbit:connection-factory id="cachingConnectionFacotry" connection-factory="rabbitConnectionFactory" channel-cache-size="${channelCacheSize}" publisher-confirms="true"/>  
               

           <bean id="rabbitConnectionFactory" class="org.springframework.amqp.rabbit.connection.RabbitConnectionFactoryBean">
           		<property name="host" value="${host}"></property>
           		<property name="port" value="${port}"></property>
           		<property name="password" value="${brokerPassword}"></property>
           	  	<property name="username" value="${brokerUsername}"></property>
				<property name="virtualHost" value="${virtualHost}"></property>
           		<property name="useSSL" value="${useSSL}"></property>  
           </bean>
           
           <rabbit:template id="template" connection-factory="cachingConnectionFacotry" confirm-callback="rumConfirmCallback"></rabbit:template>
           <bean id="rumConfirmCallback" class="com.sp.rum.receiver.RUMConfirmCallback">
           		<property name="rumImpl" ref="umessagerInstance"></property>
           </bean>
           
           <rabbit:admin id="admin" connection-factory="cachingConnectionFacotry"/>
           
           <rabbit:queue id="localQueue" name="${localQueuePrefix}-${localId}" durable="${queueDurable}" exclusive="${exclusive}" queue-arguments="queueAgs" declared-by="admin"/>
           <rabbit:queue-arguments id="queueAgs"/>
           
           <rabbit:direct-exchange id="directExchange" name="${exchangeName}" durable="${exchangeDurable}" declared-by="admin">
           		<rabbit:bindings>
           			<rabbit:binding queue="localQueue" key="${localId}"></rabbit:binding>
           		</rabbit:bindings>
           </rabbit:direct-exchange>
           
     		<!-- SimpleListenerContainer start -->
           <rabbit:listener-container connection-factory="cachingConnectionFacotry" max-concurrency="${maxConcurrency}" auto-declare="${autoDeclare}"
             prefetch="${prefetch}">
            	<rabbit:listener ref="listener" queues="localQueue" admin="admin" ></rabbit:listener>
           </rabbit:listener-container>
           
           <bean id="listener" class="com.sp.rum.receiver.IncomingMessageListener">
          		<property name="messageExecutor" ref="messageExecutor" ></property>
           		<property name="messageProcessor" ref="messageProcessor"></property>
           </bean> 
           <bean id="messageExecutor" class="com.sp.rum.receiver.MessageAsynchronousExecutor" init-method="init" destroy-method="destroy">
           		<property name="threadNamePrefix" value="${threadNamePrefix}${localId}"></property>
           		<property name="concurrentProcessorCount" value="${concurrentProcessorCount}"></property>
           </bean>
           <bean id="messageProcessor" class="com.sp.rum.receiver.RUMMessageProcessor">
           		<property name="iAndRMessageListenerRegister" ref="iAndRMessageListenerRegister"></property>
           		<property name="eventListenerRegister" ref="eventListenerRegister"></property>
           		<property name="responseMessageListenerRegister" ref="responseMessageListenerRegister"></property>
           </bean>
 		   <!-- SimpleListenerContainer end -->
</beans>